import { TwilioService } from "@lkaric/twilio-nestjs";
import { Model } from "mongoose";
import { SharedService } from "../shared/shared.service";
import { CreateOrganizationDto } from "./dto/create-organization.dto";
import { GenerateTokenDto } from "./dto/generate-token.dto";
import { Organization } from "./interface/organization.interface";
import { RedisService } from "nestjs-redis";
import { ValidateNewOrganizationDto } from "./dto/validation.dto";
import { UserService } from "../user/user.service";
import { ResellerOrganization } from "../organization/interface/reseller-organization.interface";
import { UpdateQuotaDto } from "./dto/update-quota.dto";
import { Transaction } from "./interface/transaction.interface";
import { AdminAction } from "../agent/interface/admin-actions.interface";
import { CampaignForm } from "../campaign/interfaces/campaign-form.interface";
import { Campaign } from "../campaign/interfaces/campaign.interface";
import { Disposition } from "../campaign/interfaces/disposition.interface";
import { CampaignConfig } from "../lead/interfaces/campaign-config.interface";
import { Lead } from "../lead/interfaces/lead.interface";
export declare class OrganizationService {
    private readonly organizationalModel;
    private readonly resellerOrganizationModel;
    private readonly transactionModel;
    private readonly campaignModel;
    private readonly campaignConfigModel;
    private readonly dispositionModel;
    private readonly adminActionModel;
    private readonly campaignFormModel;
    private readonly leadModel;
    private readonly twilioService;
    private readonly sharedService;
    private readonly redisService;
    private userService;
    getCurrentOrganization(organization: string): Promise<Pick<Organization, "_id" | "size" | "name" | "email" | "phoneNumber" | "accountType" | "phoneNumberPrefix" | "lastActive" | "organizationImage" | "startDate" | "endDate" | "currentSize">>;
    constructor(organizationalModel: Model<Organization>, resellerOrganizationModel: Model<ResellerOrganization>, transactionModel: Model<Transaction>, campaignModel: Model<Campaign>, campaignConfigModel: Model<CampaignConfig>, dispositionModel: Model<Disposition>, adminActionModel: Model<AdminAction>, campaignFormModel: Model<CampaignForm>, leadModel: Model<Lead>, twilioService: TwilioService, sharedService: SharedService, redisService: RedisService, userService: UserService);
    deleteOrganization(organization: string): Promise<void>;
    createOrganization(createOrganizationDto: CreateOrganizationDto, resellerId: string, resellerName: string): Promise<void>;
    getAllResellerOrganization(id: string): Promise<ResellerOrganization[]>;
    generateToken(generateTokenDto: GenerateTokenDto): Promise<import("twilio/lib/rest/api/v2010/account/message").MessageInstance>;
    getOTPForNumber(mobileNumber: string): Promise<string>;
    sendOtp(otp: any, mobileNumber: any): Promise<import("twilio/lib/rest/api/v2010/account/message").MessageInstance>;
    isAttributeValid(validationDto: ValidateNewOrganizationDto): Promise<void>;
    isOrganizationalPayloadValid(createOrganizationDto: CreateOrganizationDto): Promise<boolean>;
    createOrUpdateUserQuota(obj: UpdateQuotaDto): Promise<Transaction>;
    getAllPayments(organization: any): Promise<Transaction[]>;
    getAllOrganizations(): Promise<Pick<Organization, "_id" | "size" | "name" | "email" | "phoneNumber" | "accountType" | "phoneNumberPrefix" | "lastActive" | "organizationImage" | "startDate" | "endDate" | "currentSize">[]>;
}
